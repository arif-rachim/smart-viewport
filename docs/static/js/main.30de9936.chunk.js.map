{"version":3,"sources":["MobileScreen.module.css","MobileScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","DEFAULT_STATE","screen","width","height","reducer","state","action","type","VideoElement","isLandscapeMode","boxPerRow","video","style","viewPortRef","useRef","toFixed","useEffect","current","appendChild","ref","className","classes","viewport","updateAllViewports","document","querySelectorAll","forEach","div","content","viewPort","viewPortWidth","offsetWidth","viewPortHeight","offsetHeight","contentWidth","contentHeight","scaleX","scaleY","scale","Math","max","newContentWidth","newContentHeight","top","left","setAttribute","fillContentInViewPort","firstChild","MobileScreen","videos","useReducer","dispatch","screenRef","onResize","event","window","addEventListener","removeEventListener","screenStyle","border","boxSizing","position","display","flexDirection","flexWrap","ratio","setTimeout","numberOfBoxes","length","boxesPerRow","key","toString","calculateBoxPerRow","map","i","createDiv","createElement","innerHTML","App","useState","setVideos","vids","push","bottom","right","ButtonGroup","variant","color","aria-label","Button","onClick","filter","vid","idx","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.30de9936.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"viewport\":\"MobileScreen_viewport__5NiKG\"};","import React, {useEffect, useLayoutEffect, useReducer, useRef} from \"react\";\r\nimport classes from './MobileScreen.module.css';\r\nconst DEFAULT_STATE = {\r\n    screen : {\r\n        width : 0,\r\n        height : 0\r\n    }\r\n};\r\n\r\nconst reducer = (state,action) => {\r\n    switch (action.type) {\r\n        case 'screen-size' :\r\n            return {...state,screen:{width:action.width,height:action.height}}\r\n        default :\r\n            return state;\r\n    }\r\n\r\n};\r\n\r\n\r\nfunction calculateBoxPerRow(numberOfBoxes) {\r\n    const boxesPerRow = {\r\n        '1' : 1,\r\n        '2' : 2,\r\n        '3' : 3,\r\n        '4' : 2,\r\n        '5' : 3,\r\n        '6' : 3,\r\n        '7' : 4,\r\n        '8' : 4,\r\n        '9' : 3,\r\n        '10' : 5,\r\n        '11' : 4,\r\n        '12' : 4,\r\n        '13' : 5,\r\n        '14' : 5,\r\n        '15' : 5,\r\n        '16' : 4,\r\n        '17' : 5,\r\n        '18' : 5\r\n    };\r\n    const key = numberOfBoxes.toString();\r\n    if(key in boxesPerRow){\r\n        return boxesPerRow[key];\r\n    }\r\n    return 5;\r\n}\r\n\r\nfunction fillContentInViewPort(content, viewPort) {\r\n    const {offsetWidth: viewPortWidth, offsetHeight: viewPortHeight} = viewPort;\r\n    const {offsetWidth: contentWidth, offsetHeight: contentHeight} = content;\r\n    if(contentWidth === 0 && contentHeight === 0){\r\n        return;\r\n    }\r\n    const scaleX = viewPortWidth / contentWidth;\r\n    const scaleY = viewPortHeight / contentHeight;\r\n    const scale = Math.max(scaleX,scaleY);\r\n    const newContentWidth = contentWidth * scale;\r\n    const newContentHeight = contentHeight * scale;\r\n    const top = (viewPortHeight - newContentHeight)  / 2;\r\n    const left = (viewPortWidth - newContentWidth) / 2;\r\n\r\n    content.setAttribute('style', `\r\n        width:${newContentWidth}px;\r\n        height:${newContentHeight}px;\r\n        top:${top}px;\r\n        left:${left}px;\r\n        position:absolute;\r\n        transition:all 300ms ease-in-out;\r\n    `);\r\n}\r\n\r\nfunction VideoElement({isLandscapeMode,boxPerRow,video}) {\r\n    const style = {};\r\n    const viewPortRef = useRef();\r\n    style[isLandscapeMode ? 'width' : 'height'] = `${(100 / boxPerRow).toFixed(0)}%`;\r\n    useEffect(() => {\r\n        viewPortRef.current.appendChild(video);\r\n    },[video]);\r\n    return <div ref={viewPortRef} className={classes.viewport} style={style}/>;\r\n}\r\n\r\nfunction updateAllViewports() {\r\n    document.querySelectorAll(`.${classes.viewport}`).forEach((div) => {\r\n        fillContentInViewPort(div.firstChild, div);\r\n    });\r\n}\r\n\r\nexport default function MobileScreen({videos}){\r\n    const [state,dispatch] = useReducer(reducer,DEFAULT_STATE);\r\n    const screenRef = useRef();\r\n    useEffect(() => {\r\n        function onResize(event) {\r\n            const {offsetWidth:width,offsetHeight:height} = screenRef.current;\r\n            dispatch({type:'screen-size',width,height});\r\n        }\r\n        onResize();\r\n        window.addEventListener(\"resize\", onResize);\r\n        return () => {\r\n            window.removeEventListener('resize',onResize);\r\n        }\r\n    },[]);\r\n    const isLandscapeMode = state.screen.width > state.screen.height;\r\n    const screenStyle = {\r\n        border:'1px solid red',\r\n        height:'100%',\r\n        boxSizing:'border-box',\r\n        position:'relative',\r\n        display : 'flex',\r\n        flexDirection : isLandscapeMode ? 'row' : 'column',\r\n        flexWrap : 'wrap'\r\n    };\r\n    const ratio = state.screen.width / state.screen.height;\r\n    useEffect(() => {\r\n        updateAllViewports();\r\n    },[ratio]);\r\n    useEffect(() =>{\r\n        setTimeout(updateAllViewports,100);\r\n\r\n    },[]);\r\n    const numberOfBoxes = videos.length;\r\n    useEffect(() => {\r\n        // somehow we need to query twice ??\r\n        updateAllViewports();\r\n        updateAllViewports();\r\n    },[numberOfBoxes]);\r\n    const boxPerRow = calculateBoxPerRow(numberOfBoxes);\r\n\r\n    return <div ref={screenRef} style={screenStyle}>\r\n        {videos.map((video,i) => <VideoElement key={i} video={video} isLandscapeMode={isLandscapeMode} boxPerRow={boxPerRow}/>)}\r\n    </div>\r\n}\r\n","import React, {useEffect, useReducer, useRef, useState} from 'react';\r\nimport MobileScreen from \"./MobileScreen\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\n\r\nfunction createDiv() {\r\n    const div = document.createElement('div');\r\n    div.innerHTML = `<div style=\"width: 100%;height:100%;display: flex;align-items: center;justify-content: center\">\r\n                <img src=\"pics.jpg\" />\r\n            </div>`;\r\n    return div;\r\n}\r\n\r\nexport default function App() {\r\n    const [videos,setVideos] = useState([]);\r\n    useEffect(() => {\r\n        const vids = [];\r\n        for (let i = 0; i < 5; i++) {\r\n            vids.push(createDiv());\r\n        }\r\n        setVideos(vids);\r\n    },[]);\r\n\r\n    function handleOnAdd() {\r\n        setVideos((vids) => [...vids,createDiv()]);\r\n    }\r\n\r\n    function handleOnRemove(){\r\n        setVideos((vids) => {\r\n            return vids.filter((vid,idx) => {\r\n                if(idx === vids.length - 1){\r\n                    return false;\r\n                }\r\n                return true;\r\n            });\r\n        });\r\n    }\r\n    return <div style={{width:'100%',height:'100%',position:'relative'}}>\r\n        <MobileScreen videos={videos}/>\r\n        <div style={{position:'absolute',bottom:10,right:10}}>\r\n            <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\r\n                <Button onClick={() => handleOnAdd()} variant={\"contained\"}>Add</Button>\r\n                <Button onClick={() => handleOnRemove()} variant={\"contained\"}>Remove</Button>\r\n            </ButtonGroup>\r\n\r\n        </div>\r\n    </div>\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<React.StrictMode><App /></React.StrictMode>,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}